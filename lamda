"""
ME102B Smart Wardrobe

"""

from __future__ import print_function

# -----------------Libraries to Connect to Wardrobe-----------------------------
import socket
import sys
import time
import struct

# --------------- Helpers that build all of the responses ----------------------

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


# --------------- Functions that control the skill's behavior ------------------

def get_welcome_response():
    """ If we wanted to initialize the session to have some attributes we could
    add those here
    """

    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Welcome, I am Jetson. Your personal smart wardrobe."
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = "You can request a piece of clothing by saying, for example," \
                    "I want the black shirt."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Exiting. Thank you."
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))

def get_request_in_session(intent, session):
    """ Sets the request session and prepares the speech to reply to the
    user.
    """

    card_title = intent['name']
    session_attributes = {}
    should_end_session = False

    if 'Color' in intent['slots'] and 'Clothes' in intent['slots']:
            
        color = intent['slots']['Color']['value']
        clothes = intent['slots']['Clothes']['value']
        
        session_attributes = {"UserColor": color, "UserClothes": clothes}
    
        requested_article_exists = True
        connection_failed = False
        
        try:    
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = ('138.68.40.50', 10000)
            sock.connect(server_address)
            sock.send("<get>" + color + ' ' + clothes)
            
            # Get response from Droplet if Article exists
            data = sock.recv(1024)
            if data == '<no_ret>':
                requested_article_exists = False
            sock.close()
          
        except:
            connection_failed = True
            pass
        
        if connection_failed:
            speech_output = "Failed to connect to droplet."
            reprompt_text = "Failed to connect to droplet."
        else:
            if requested_article_exists:
                speech_output = "Okay. Retrieving your " + \
                                color + \
                                " " + \
                                clothes + \
                                ". Please wait."
                reprompt_text = "Please hold on."
        
                should_end_session = True
            else:
                speech_output = "Article of clothing, " + color + " " + clothes + ", not in my database. Please try again"
                reprompt_text = speech_output
                should_end_session = True
        

    else:
        speech_output = "I'm not sure what you are requesting. " \
                        "Please try again."
        reprompt_text = "I'm not sure what you are requesting. " \
                        "Please state your request by saying" \
                        "colour, and clothings"
        should_end_session = True
                        
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def verify_request_from_session(intent, session):
    session_attributes = {}
    reprompt_text = None
    card_title = intent['name']
    
    if session.get('attributes', {}) and "UserClothes" in session.get('attributes',{}) and "UserColor" in session.get('attributes',{}):
        color = session['attributes']['UserColor']
        clothes = session['attributes']['UserClothes']
        
        speech_output = "You last requested a " + \
                        color + \
                        " " + \
                        clothes +\
                        ". How can I help you?"
        should_end_session = False
    else:
        speech_output = "You did not make any request previously. " \
                        "You can say, for example, I want my black shirt."
        should_end_session = False

    # Setting reprompt_text to None signifies that we do not want to reprompt
    # the user. If the user does not respond or says something that is not
    # understood, the session will end.
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))

def put_request_from_session(intent, session):
    
    session_attributes = {}
    reprompt_text = None
    card_title = "Input"
    
    if 'Color' in intent['slots'] and 'Clothes' in intent['slots']:
            
        color = intent['slots']['Color']['value']
        clothes = intent['slots']['Clothes']['value']
        
        session_attributes = {"UserColor": color, "UserClothes": clothes}
    
        requested_article_does_not_exist = True
        connection_failed = False
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = ('138.68.40.50', 10000)
            sock.connect(server_address)
            sock.send("<put>" + color + ' ' + clothes)
            # Get response from Droplet if Article exists
            data = sock.recv(1024)
            if data == '<no_insert>':
                requested_article_does_not_exist = False
            sock.close()
        except:
            connection_failed = True
            pass

        if connection_failed:
            speech_output = "Failed to connect to droplet."
        else:
            if requested_article_does_not_exist:
                speech_output = "Okay. Storing your " + \
                                color + \
                                " " + \
                                clothes + \
                                ". Please wait."
                reprompt_text = "Please hold on."
        
                should_end_session = True
            else:
                speech_output = color + " " + clothes + ", already exists in my database. Please try again"
                reprompt_text = speech_output
                should_end_session = True
    
    else:
        speech_output = "I'm not sure what you are requesting. " \
                        "Please try again."
        reprompt_text = "I'm not sure what you are requesting. " \
                        "Please state your request by saying" \
                        "colour, and clothings"
 
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, None, should_end_session))
        
def put_and_identify_request_from_session():
    
    session_attributes = {}
    reprompt_text = None
    card_title = "Input"
    connection_failed = False
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_address = ('138.68.40.50', 10000)
        sock.connect(server_address)
        sock.send("<put_and_id>")
        sock.close()
    except:
        connection_failed = True
        pass
    
    if connection_failed:
        speech_output = "Failed to connect to droplet."
    else:
        speech_output = "Okay, I am storing this piece of clothing. Please wait." \

    should_end_session = True
 
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, None, should_end_session))
   
# Memes
def publicfunds_request_from_session(intent, session):     
    session_attributes = {}
    reprompt_text = None
    card_title = "Input"
    speech_output = "I don't know. Why don't you ask Chancellor Dirks?"
    should_end_session = True
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, None, should_end_session))
        
def gradedeserved_request_from_session(intent, session):     
    session_attributes = {}
    reprompt_text = None
    card_title = "Input"
    speech_output = "That's a great question. Alex, Travis, Ceci, Shuwen and Guolin have really let their strengths shine in this endeavor. Thanks to the expert tutelage of professor Lin, and support from the grad student instructors, Luna and Eric, Jetson has become a reality. Special thanks should be given to the staff in the machine shop. This project wouldn't be possible without their guidance and experience. If I had to judge, I'd give this project an A plus. Nothing less. Go Bears!"
    should_end_session = True
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, None, should_end_session))
        
def superbowl_request_from_session(intent, session):     
    session_attributes = {}
    reprompt_text = None
    card_title = "Input"
    speech_output = "That's easy. There's only one nation baby, Raider nation! Derek Carr is the smoky eye jesus come to restore this franchise to greatness. Other teams can't handle this O line AKA car insurance. We have the AC/DC connection and michael crab tree making sick plays over the middle. Then we're gonna ride the tay train all the way to touchdown town. Don't sleep on our dee either. The kalil mack sack attack, AKA mack frama lama is going to be defensive player of the year. You heard it here first. Just win baby. Raider nation for life."
    should_end_session = True
    
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, None, should_end_session))

        
# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts """

    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """

    print("on_launch requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # Dispatch to your skill's launch
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Dispatch to your skill's intent handlers

    if intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent" or intent_name == "TheEndIntent":
        return handle_session_end_request()
    elif intent_name == "IWantClothesIntent":
        return get_request_in_session(intent, session)
    elif intent_name == "WhatIWantedIntent":
        return verify_request_from_session(intent, session)
    elif intent_name == "InputClothesIntent":
        return put_request_from_session(intent, session)
    elif intent_name == "InputandIdentifyClothesIntent":
        return put_and_identify_request_from_session()
    elif intent_name == "PublicFundsIntent":
        return publicfunds_request_from_session(intent, session)
    elif intent_name == "GradeDeservedIntent":
        return gradedeserved_request_from_session(intent, session)
    elif intent_name == "SuperBowlIntent":
        return superbowl_request_from_session(intent, session)
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
